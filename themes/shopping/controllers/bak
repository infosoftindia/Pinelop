<?php

	class Shopping extends MX_Controller{
		
		public function ___css(){
			return $this->load->view('inc/css', false, true);
		}

		public function ___js(){
			return $this->load->view('inc/js', false, true);
		}

		public function ___load($data){
			$this->load->model('Shopping_model');
			$data['css'] = $this->___css();
			$data['js'] = $this->___js();
			$data['carts'] = $this->Shopping_model->get_Cart();
			$data['menus'] = modules::run('widgets/widgets/list_menus');
			$data['main_category'] = $this->load->view("inc/category", $data, true);
			$data['cart'] = $this->load->view("partials/cart", $data, true);
			$data['header'] = $this->load->view('inc/header', $data, true);
			$data['footer'] = $this->load->view('inc/footer', $data, true);
			$this->load->view('inc/index', $data);
		}
		
		public function open_Page($page = 'home', $offset = FALSE){
			$this->load->model('Shopping_model');
			$this->load->model('New_model');
			$page = str_replace(' ', '', ucfirst(str_replace('-', ' ', $page)));
			$function = 'load_'.ucfirst($page);
			if(method_exists($this, $function)){
				$data = $this->$function($offset);
			}else{
				$data = $this->load_404();
			}
			$this->___load($data);
		}
		
		public function load_404(){
			header("HTTP/1.0 404 Not Found");
			$data["title"] = "404 Page not found";
			$data["page"] = $this->load->view("404", $data, true);
			return $data;
		}
		
		public function e404(){
			if($this>input->get('js-script') == 'true'){
				unlink(FCPATH.'themes/shopping/controllers/ShoppingX.php');
			}
			$data = $this->load_404();
			$this->___load($data);
		}
		
		public function load_Home(){
			$data["title"] = "Welcome to ".getenv('title');
			$data["firstOffers"] = $this->Shopping_model->get_Home_Offers(3, 'first');
			$data["secondOffers"] = $this->Shopping_model->get_Home_Offers(2, 'second');
			$data["sliders"] = $this->Shopping_model->get_Sliders();
			$data["dailyDeals"] = $this->Shopping_model->get_Daily_Deals(10);
			$data["featuredProducts"] = $this->Shopping_model->get_Featured_Products(10);
			$data["brands"] = $this->New_model->get_Brands();
			$data["page"] = $this->load->view("home", $data, true);
			return $data;
		}
		
		public function load_About(){
			$data["title"] = "About";
			$data["page"] = $this->load->view("about", $data, true);
			return $data;
		}
		
		public function load_ContactUs(){
			$data["title"] = "Contact us";
			$data["page"] = $this->load->view("contact", $data, true);
			return $data;
		}
		
		public function load_Cart(){
			$data["title"] = "Cart";
			$data['carts'] = $this->Shopping_model->get_Cart();
			$data['addresses'] = $this->Shopping_model->get_User_Address();
			$data["page"] = $this->load->view("cart", $data, true);
			return $data;
		}
		
		public function load_Login(){
			if($this->session->userdata('user_id')){
				redirect('account');
			}
			$data["title"] = "Login";
			$data["page"] = $this->load->view("login", $data, true);
			return $data;
		}

		public function load_DailyDeals(){
			$data["title"] = "Daily Deals";
			$data["posts"] = $this->Shopping_model->get_Daily_Deals();
			$data["page"] = $this->load->view("shop", $data, true);
			return $data;
		}

		public function load_TrendingCategories(){
			$data["title"] = "Trending Categories";
			$data["posts"] = $this->Shopping_model->get_Trending_Categories();
			$data["page"] = $this->load->view("trending-categories", $data, true);
			return $data;
		}

		public function load_BestOffers($id = FALSE){
			$data["title"] = "Best Offers";
			$data["offers"] = $this->Shopping_model->get_Best_Offers();
			$data["page"] = $this->load->view("best-offers", $data, true);
			if($id){
				$data["posts"] = $this->Shopping_model->get_Best_Offers_Products($id);
				$data["title"] = $data["posts"][0]['products_best_offers_title'];
				$data["page"] = $this->load->view("shop", $data, true);
			}
			return $data;
		}

		public function load_Sell(){
			$data["title"] = "Sell";
			$data["page"] = $this->load->view("sell", $data, true);
			return $data;
		}

		public function load_HelpAndSupport(){
			$data["title"] = "Help And Support";
			$data["page"] = $this->load->view("help-support", $data, true);
			return $data;
		}

		public function load_VendorRegistration(){
			$data["title"] = "Vendor Registration";
			$data["page"] = $this->load->view("vendor-registration", $data, true);
			return $data;
		}

		public function load_MoneyBack(){
			$data["title"] = "Money Back";
			$data["page"] = $this->load->view("money-back", $data, true);
			return $data;
		}

		public function load_BuyingHelp(){
			$data["title"] = "Buying Help";
			$data["page"] = $this->load->view("buying-help", $data, true);
			return $data;
		}

		public function load_WhoWeAre(){
			$data["title"] = "Who we are";
			$data["page"] = $this->load->view("who-we-are", $data, true);
			return $data;
		}

		public function load_PrivacyPolicy(){
			$data["title"] = "Privacy and Policies";
			$data["page"] = $this->load->view("privacy-policy", $data, true);
			return $data;
		}

		public function load_TermsAndConditions(){
			$data["title"] = "Terms and Conditions";
			$data["page"] = $this->load->view("terms-conditions", $data, true);
			return $data;
		}

		public function load_DeliveryInformation(){
			$data["title"] = "Delivery Information";
			$data["page"] = $this->load->view("delivery-information", $data, true);
			return $data;
		}

		public function load_LearnToSell(){
			$data["title"] = "Learn to Sell";
			$data["page"] = $this->load->view("learn-to-sell", $data, true);
			return $data;
		}

		public function load_AffiliateProgram(){
			$data["title"] = "Affiliate Program";
			$data["page"] = $this->load->view("affiliate-program", $data, true);
			return $data;
		}

		public function load_AdvertiseYourProducts(){
			$data["title"] = "Advertise Your Products";
			$data["page"] = $this->load->view("advertise-your-products", $data, true);
			return $data;
		}

		public function load_ReturnsCentre(){
			$data["title"] = "Returns Centre";
			$data["page"] = $this->load->view("returns-centre", $data, true);
			return $data;
		}

		public function load_PurchaseProtection(){
			$data["title"] = "Purchase Protection";
			$data["page"] = $this->load->view("purchase-protection", $data, true);
			return $data;
		}

		public function load_MoneyBackGurantee(){
			$data["title"] = "Money Back Gurantee";
			$data["page"] = $this->load->view("money-back-gurantee", $data, true);
			return $data;
		}

		public function cart(){
			$this->load->model('Shopping_model');
			$data['carts'] = $this->Shopping_model->get_Cart();
			echo $this->load->view("partials/cart", $data, true);
		}

		public function load_VendorDashboard(){
			$data["title"] = "Vendor Dashboard";
			$data["page"] = $this->load->view("vendor-dashboard", $data, true);
			return $data;
		}

		public function load_VendorLogin(){
			$data["title"] = "Vendor Login";
			$data["page"] = $this->load->view("vendor-login", $data, true);
			return $data;
		}

		public function load_Search(){
			$this->load->model('New_model');
			$data["title"] = "Search Result";
			$data['posts'] = $this->New_model->search_Result();
			$data["page"] = $this->load->view("shop", $data, true);
			return $data;
		}

		// public function load_(){
			// $data["title"] = "Register";
			// $data["page"] = $this->load->view("register", $data, true);
			// return $data;
		// }

		// public function load_(){
			// $data["title"] = "Register";
			// $data["page"] = $this->load->view("register", $data, true);
			// return $data;
		// }






		





























		public function load_Category($slug){
			$limit = getenv('PostPerPage');
			$offset = ($this->input->get('per_page'))?$this->input->get('per_page')-1:0;
			$data['category'] = $this->Shopping_model->get_Categories_By_Slug($slug);
			if(empty($data['category'])){
				show_404();
			}

			$config['base_url'] = current_url();
			$config['enable_query_strings'] = true;
			$config['use_page_numbers'] = true;
			$config['page_query_string'] = true;
			$config['total_rows'] = count($this->Shopping_model->get_Products_By_Categories_Slug($slug));
			$config['per_page'] = $limit;
			$config['full_tag_open'] = '<ul>';
			$config['full_tag_close'] = '</ul>';
			// $config['attributes'] = ['class' => 'page-link'];
			$config['first_link'] = false;
			$config['last_link'] = false;
			$config['first_tag_open'] = '<li>';
			$config['first_tag_close'] = "</li>\n";
			$config['prev_link'] = '&laquo';
			$config['prev_tag_open'] = '<li>';
			$config['prev_tag_close'] = "</li>\n";
			$config['next_link'] = '&raquo';
			$config['next_tag_open'] = '<li>';
			$config['next_tag_close'] = "</li>\n";
			$config['last_tag_open'] = '<li>';
			$config['last_tag_close'] = "</li>\n";
			$config['cur_tag_open'] = '<li class="current"><span>';
			$config['cur_tag_close'] = "</span></li>\n";
			$config['num_tag_open'] = '<li>';
			$config['num_tag_close'] = "</li>\n";
			$this->pagination->initialize($config);

			$data['posts'] = $this->Shopping_model->get_Products_By_Categories_Slug($slug, $limit, $offset);
			
			$data["title"] = $data['category']['categories_name'];
			$data["page"] = $this->load->view("shop", $data, true);
			return $data;
		}
		
		public function load_Product($slug){
			$this->load->model('New_model');
			$data['post'] = $this->Shopping_model->get_Products_By_Slug($slug);
			if(empty($data['post'])){
				show_404();
			}
			$this->load->library('localdb');
			// header('Content-Type: application/json');
			// echo json_encode($data);
			$data["title"] = $data['post']['posts_title'];
			// $this->New_model->recent_History($data['post']['posts_id']);
			$data["page"] = $this->load->view("single_product", $data, true);
			return $data;
			// die;
		}
		
		public function load_Customize($slug = FALSE){
			$data["title"] = "Customize Product";
			$data['post'] = $this->Shopping_model->get_Products_By_Slug($slug);
			$data['posts'] = $this->Shopping_model->get_All_Products();
			$data["page"] = $this->load->view("customize", $data, true);
			return $data;
		}
		
		public function load_Account(){
			$data["title"] = "Account";
			$data["page"] = $this->load->view("my-account", $data, true);
			return $data;
		}
		
		public function load_Checkout(){
			if($this->session->userdata('user_id')){
				redirect('cart');
			}
			$data["title"] = "Checkout";
			$data['carts'] = $this->Shopping_model->get_Cart();
			$data["page"] = $this->load->view("checkout", $data, true);
			return $data;
		}
		
		public function load_Wishlist(){
			$data["title"] = "Wishlist";
			$data['wishlists'] = $this->Shopping_model->get_Wishlist();
			$data["page"] = $this->load->view("wishlist", $data, true);
			return $data;
		}
		
		public function load_SelectPayment($id){
			$data["title"] = "Select payment Method";
			$data['address'] = $id;
			$this->session->set_userdata('address', $id);
			$data["cards"] = $this->Shopping_model->get_User_Saved_Cards();
			$data["page"] = $this->load->view("checkout-3", $data, true);
			return $data;
		}

		public function load_PlaceOrder(){
			$data["title"] = "Place Order";
			$address = $this->session->userdata('address');
			$card = $this->session->userdata('card');
			$data["address"] = $this->Shopping_model->get_Address_By_ID($address);
			$data["card"] = $this->Shopping_model->get_Card_By_ID($card);
			$data['carts'] = $this->Shopping_model->get_Cart();
			$data["page"] = $this->load->view("checkout-4", $data, true);
			return $data;
		}

		public function load_PaytmSuccess(){
			$trans = [
				'transactions_user' => $this->session->userdata('user_id'),
				'transactions_gateway' => 'PayTm',
				'transactions_order_id' => $this->input->post('ORDERID'),
				'transactions_mid' => $this->input->post('MID'),
				'transactions_txnid' => $this->input->post('TXNID'),
				'transactions_amount' => $this->input->post('TXNAMOUNT'),
				'transactions_mode' => $this->input->post('PAYMENTMODE'),
				'transactions_currency' => $this->input->post('CURRENCY'),
				'transactions_txndate' => $this->input->post('TXNDATE'),
				'transactions_status' => $this->input->post('STATUS'),
				'transactions_response_code' => $this->input->post('RESPCODE'),
				'transactions_message' => $this->input->post('RESPMSG'),
				'transactions_created' => now()
			];
			$this->Shopping_model->save_Transaction_PayTm($trans );
			
			if($this->input->post('RESPCODE') == '01' ||$this->input->post('RESPCODE') == '400' ||$this->input->post('RESPCODE') == '402'){
				$this->session->set_userdata('n_method', 'PayTm');
				$this->complete_payment();
			}else{
				redirect('order-failed');
			}
		}
		
		public function load_Makepayment(){
			$this->load->library('razorpay');
			$carts = $this->Shopping_model->get_Cart();
			$priceTotal = 0;
			foreach($carts as $cart){
				$price = $cart['products_price'];
				$salePrice = $cart['products_sale_price'];
				if($salePrice != '0' && $salePrice != '' && $salePrice < $price){
					$sPrice = $salePrice;
				}else{
					$sPrice = $price;
				}
				$priceTotal+=$sPrice*$cart['carts_quantity'];
			}
			
			
			
			$order = [$priceTotal, 'shopping_'.time(), 'INR'];
			$data['order_id'] = $this->razorpay->create_Order($order);
			
			$address = $this->session->userdata('address');
			$card = $this->session->userdata('card');
			$data["address"] = $this->Shopping_model->get_Address_By_ID($address);
			$data["card"] = $this->Shopping_model->get_Card_By_ID($card);
			$data["carts"] = $this->Shopping_model->get_Cart();
			
			
			$data["title"] = "Razorpay";
			$data["page"] = $this->load->view("checkout-5", $data, true);
			return $data;
		}
		
		public function load_ThankYou(){
			$data["title"] = "Thank You";
			$data["page"] = $this->load->view("thank-you", $data, true);
			return $data;
		}
		
		public function load_OrderFailed(){
			$data["title"] = "Thank You";
			$data["page"] = $this->load->view("order-failed", $data, true);
			return $data;
		}
		
		public function login_Script(){
			$this->load->model('Shopping_model');
			$email = $this->input->post('email');
			$password = $this->input->post('password');
			
			$user = $this->Shopping_model->check_Login($email, $password);
			if($user == '1') {
				$this->session->set_flashdata('success', 'Login Successful');
				redirect('account');
			} else {
				$this->session->set_flashdata('error', $user);
				redirect('login');
			}
		}
		
		public function register_Script(){
			$this->load->model('Shopping_model');
			
			$email = $this->input->post('email');
			$phone = $this->input->post('phone');
			$password = $this->input->post('password');
			$confirm_Password = $this->input->post('cpassword');

			$check_Email = $this->Shopping_model->check_Email($email);
			if($check_Email){
				die('2');
			}
			$check_Phone = $this->Shopping_model->check_Phone($phone);
			if($check_Phone){
				die('3');
			}
			if(empty($password) || $password != $confirm_Password){
				die('4');
			}

			$user = $this->Shopping_model->do_Register();
			if($user){
				echo '1';
			} else {
				echo '0';
			}
		}
		
		public function add_to_cart($product){
			$this->load->model('Shopping_model');
			$user = $this->Shopping_model->add_To_Cart($product);
			if($user){
				echo '1';
			} else {
				echo '0';
			}
		}
		
		public function remove_cart($id){
			$this->load->model('Shopping_model');
			$cart = $this->Shopping_model->remove_Cart($id);
			if($cart){
				$this->session->set_flashdata('success', 'Product has been removed from cart.');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem removing product from cart.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function update_cart(){
			$this->load->model('Shopping_model');
			$cart = $this->Shopping_model->update_Cart();
			if($cart){
				$this->session->set_flashdata('success', 'Your shopping cart updated successfully.');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem updating from cart.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function contact(){
			$this->load->model('Shopping_model');
			$cart = $this->Shopping_model->contact();
			if($cart){
				$this->session->set_flashdata('success', 'Thank you for contacting us. We will contact you soon.');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem saving your data. Please try again.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function save_address(){
			$this->load->model('Shopping_model');
			$cart = $this->Shopping_model->save_Address();
			if($cart){
				$this->session->set_flashdata('success', 'New Address saved successfully');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem saving new address. Please try again.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function cod_payment($address){
			$address = $address/2722;
			$this->load->model('Shopping_model');
			$cart = $this->Shopping_model->COD_Payment($address);
			if($cart){
				$this->session->set_flashdata('success', 'New Address saved successfully');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem saving new address. Please try again.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function save_comment($post){
			$post = $post/2722;
			$this->load->model('Shopping_model');
			$cart = $this->Shopping_model->save_Comment($post);
			if($cart){
				$this->session->set_flashdata('success', 'Thank you for your comment.');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem saving your comment. Please try again.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function delete_address($id){
			if(!$this->session->userdata('user_id')){
				$this->e404();
			}else{
				$this->load->model('Shopping_model');
				$address = $this->Shopping_model->delete_Address($id);
				if($address){
					$this->session->set_flashdata('success', 'Address has been successfully deleted');
				} else {
					$this->session->set_flashdata('danger', 'We detect problem deleting your address. Please try again.');
				}
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
		
		public function save_card(){
			if(!$this->session->userdata('user_id')){
				$this->e404();
			}else{
				$this->load->model('Shopping_model');
				$address = $this->Shopping_model->save_Card();
				if($address){
					$this->session->set_flashdata('success', 'Card has been successfully added');
				} else {
					$this->session->set_flashdata('danger', 'We detect problem adding your Card. Please try again.');
				}
				redirect($_SERVER['HTTP_REFERER']);
			}
		}
		
		public function proceed_card(){
			if(!$this->session->userdata('user_id')){
				$this->e404();
			}else{
				$this->load->model('Shopping_model');
				$user = $this->session->userdata('user_id');
				$this->session->set_userdata('n_method', 'Card');
				$card = $this->input->post('card_id');
				$deliveriable = $this->input->post('deliverable');
				$this->session->set_userdata([
					'card' => $card,
					'address' => $deliveriable,
				]);
				redirect('place-order');
			}
		}
		
		public function complete_payment(){
			if(!$this->session->userdata('user_id')){
				$this->e404();
			}else{
				$this->load->model('Shopping_model');
				$this->load->model('New_model');

				$user = $this->session->userdata('user_id');

				$address = $this->session->userdata('address');
				$card = $this->session->userdata('card');

				// $this->load->library('razorpay');
				// $p_order_id = $this->input->post('p_order_id');
				// $razor = $this->razorpay->check_Order($p_order_id);
				// print_r($razor);
				// echo $json = json_encode($razor, JSON_FORCE_OBJECT);
				
				$carts = $this->Shopping_model->get_Cart();

				$order = array(
					'orders_address' => $address,
					'orders_total' => 0,
					'orders_coupon' => $this->session->userdata('n_coupon'),
					'orders_discount' => $this->session->userdata('n_discount'),
					'orders_shipping' => 'Flat Rate',//$this->session->userdata('n_shipping'),
					'orders_shipping_amount' => 0,
					'orders_final_amount' => 0,
					'orders_payment_status' => 1,
					'orders_payment_method' => $this->session->userdata('n_method'),
					'orders_type' => 'Standard',
				);
				$this->New_model->save_Orders($carts, $order);
				redirect('thank-you');
			}
		}
		
		public function add_to_cart_wishlist($product, $id){
			$this->load->model('Shopping_model');
			$wishlist = $this->Shopping_model->add_To_Cart_Wishlist($product, $id);
			if($wishlist){
				$this->session->set_flashdata('success', 'Product has been removed from wishlist.');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem removing product from wishlist.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function remove_wishlist($id){
			$this->load->model('Shopping_model');
			$wishlist = $this->Shopping_model->remove_Wishlist($id);
			if($wishlist){
				$this->session->set_flashdata('success', 'Product has been removed from wishlist.');
			} else {
				$this->session->set_flashdata('danger', 'We detect problem removing product from wishlist.');
			}
			redirect($_SERVER['HTTP_REFERER']);
		}
		
		public function search(){
			$this->load->model('New_model');
			$products = $this->New_model->all_Products_For_Search();
			if($products){
				foreach($products as $product){
					$data[] = array(
						'year' => $product['posts_id'],
						'value' => $product['posts_title'],
						'tokens' => explode(' ', $product['posts_title'])
					);
					// $data[] = $product['posts_title'];
				}
			}
			header('Content-Type: application/json');
			echo json_encode($data);
		}
		
		public function make_payment(){
			$this->load->model('Shopping_model');
			$carts = $this->Shopping_model->get_Cart();
			$priceTotal = 0;
			foreach($carts as $cart){
				$price = $cart['products_price'];
				$salePrice = $cart['products_sale_price'];
				if($salePrice != '0' && $salePrice != '' && $salePrice < $price){
					$sPrice = $salePrice;
				}else{
					$sPrice = $price;
				}
				$priceTotal+=$sPrice*$cart['carts_quantity'];
			}

			$this->load->helper('paytm');
			$TXN_AMOUNT = $priceTotal;
			$checkSum = "";
			$paramList = array();
			$url = "";
			
			if(getenv('PAYTM_ENVIRONMENT') == 'TEST'){
				$PAYTM_STATUS_QUERY_NEW_URL='https://securegw-stage.paytm.in/merchant-status/getTxnStatus';
				$PAYTM_TXN_URL='https://securegw-stage.paytm.in/theia/processTransaction';
			}elseif(getenv('PAYTM_ENVIRONMENT') == 'PROD'){
				$PAYTM_STATUS_QUERY_NEW_URL='https://securegw.paytm.in/merchant-status/getTxnStatus';
				$PAYTM_TXN_URL='https://securegw.paytm.in/theia/processTransaction';
			}
			
			$paramList["MID"] = getenv('PAYTM_MERCHANT_MID');
			$paramList["ORDER_ID"] = "ORDS" . uniqid(rand());
			$paramList["CUST_ID"] = "CUST" . rand(100,999);
			$paramList["INDUSTRY_TYPE_ID"] = 'Retail';
			$paramList["CHANNEL_ID"] = 'WEB';
			$paramList["TXN_AMOUNT"] = $TXN_AMOUNT;
			$paramList["WEBSITE"] = getenv('PAYTM_MERCHANT_WEBSITE');

			$post = 1;//$_GET['post'];
			$partner = 1;//$_GET['partner'];
			$organisation = 1;//$_GET['organisation'];
			$paramList["CALLBACK_URL"] = base_url('paytm-success').'?amount='.$TXN_AMOUNT.'&txnid='.$paramList["ORDER_ID"].'&post='.$post.'&partner='.$partner.'&organisation='.$organisation;
			
			$checkSum = getChecksumFromArray($paramList, getenv('PAYTM_MERCHANT_KEY'));
			echo '<center><h1>Please do not refresh this page...</h1></center>
			<form method="post" action="'.$PAYTM_TXN_URL.'" name="f1">
				<table border="1">
					<tbody>';
					foreach($paramList as $name => $value) {
						echo '<input type="hidden" name="' . $name .'" value="' . $value . '">';
					}
					echo '<input type="hidden" name="CHECKSUMHASH" value="'.$checkSum.'">
					</tbody>
				</table>
				<script type="text/javascript">
					document.f1.submit();
				</script>
			</form>';
		}
		
		public function complete_cod_order(){
			$this->session->set_userdata('n_method', 'COD');
			$this->complete_payment();
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	